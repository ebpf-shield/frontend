/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as DashboardsRouteImport } from './routes/dashboards/route'
import { Route as AgentsRouteImport } from './routes/agents/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardsIndexImport } from './routes/dashboards/index'
import { Route as AgentsIndexImport } from './routes/agents/index'
import { Route as AgentsAgentIdImport } from './routes/agents/$agentId'
import { Route as DashboardsAgentsIndexImport } from './routes/dashboards/agents/index'
import { Route as AgentsProcessesProcessIdImport } from './routes/agents/processes/$processId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsRouteRoute = DashboardsRouteImport.update({
  id: '/dashboards',
  path: '/dashboards',
  getParentRoute: () => rootRoute,
} as any)

const AgentsRouteRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardsIndexRoute = DashboardsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardsRouteRoute,
} as any)

const AgentsIndexRoute = AgentsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AgentsRouteRoute,
} as any)

const AgentsAgentIdRoute = AgentsAgentIdImport.update({
  id: '/$agentId',
  path: '/$agentId',
  getParentRoute: () => AgentsRouteRoute,
} as any)

const DashboardsAgentsIndexRoute = DashboardsAgentsIndexImport.update({
  id: '/agents/',
  path: '/agents/',
  getParentRoute: () => DashboardsRouteRoute,
} as any)

const AgentsProcessesProcessIdRoute = AgentsProcessesProcessIdImport.update({
  id: '/processes/$processId',
  path: '/processes/$processId',
  getParentRoute: () => AgentsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboards': {
      id: '/dashboards'
      path: '/dashboards'
      fullPath: '/dashboards'
      preLoaderRoute: typeof DashboardsRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/agents/$agentId': {
      id: '/agents/$agentId'
      path: '/$agentId'
      fullPath: '/agents/$agentId'
      preLoaderRoute: typeof AgentsAgentIdImport
      parentRoute: typeof AgentsRouteImport
    }
    '/agents/': {
      id: '/agents/'
      path: '/'
      fullPath: '/agents/'
      preLoaderRoute: typeof AgentsIndexImport
      parentRoute: typeof AgentsRouteImport
    }
    '/dashboards/': {
      id: '/dashboards/'
      path: '/'
      fullPath: '/dashboards/'
      preLoaderRoute: typeof DashboardsIndexImport
      parentRoute: typeof DashboardsRouteImport
    }
    '/agents/processes/$processId': {
      id: '/agents/processes/$processId'
      path: '/processes/$processId'
      fullPath: '/agents/processes/$processId'
      preLoaderRoute: typeof AgentsProcessesProcessIdImport
      parentRoute: typeof AgentsRouteImport
    }
    '/dashboards/agents/': {
      id: '/dashboards/agents/'
      path: '/agents'
      fullPath: '/dashboards/agents'
      preLoaderRoute: typeof DashboardsAgentsIndexImport
      parentRoute: typeof DashboardsRouteImport
    }
  }
}

// Create and export the route tree

interface AgentsRouteRouteChildren {
  AgentsAgentIdRoute: typeof AgentsAgentIdRoute
  AgentsIndexRoute: typeof AgentsIndexRoute
  AgentsProcessesProcessIdRoute: typeof AgentsProcessesProcessIdRoute
}

const AgentsRouteRouteChildren: AgentsRouteRouteChildren = {
  AgentsAgentIdRoute: AgentsAgentIdRoute,
  AgentsIndexRoute: AgentsIndexRoute,
  AgentsProcessesProcessIdRoute: AgentsProcessesProcessIdRoute,
}

const AgentsRouteRouteWithChildren = AgentsRouteRoute._addFileChildren(
  AgentsRouteRouteChildren,
)

interface DashboardsRouteRouteChildren {
  DashboardsIndexRoute: typeof DashboardsIndexRoute
  DashboardsAgentsIndexRoute: typeof DashboardsAgentsIndexRoute
}

const DashboardsRouteRouteChildren: DashboardsRouteRouteChildren = {
  DashboardsIndexRoute: DashboardsIndexRoute,
  DashboardsAgentsIndexRoute: DashboardsAgentsIndexRoute,
}

const DashboardsRouteRouteWithChildren = DashboardsRouteRoute._addFileChildren(
  DashboardsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/dashboards': typeof DashboardsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/dashboards/': typeof DashboardsIndexRoute
  '/agents/processes/$processId': typeof AgentsProcessesProcessIdRoute
  '/dashboards/agents': typeof DashboardsAgentsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/agents': typeof AgentsIndexRoute
  '/dashboards': typeof DashboardsIndexRoute
  '/agents/processes/$processId': typeof AgentsProcessesProcessIdRoute
  '/dashboards/agents': typeof DashboardsAgentsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/dashboards': typeof DashboardsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/dashboards/': typeof DashboardsIndexRoute
  '/agents/processes/$processId': typeof AgentsProcessesProcessIdRoute
  '/dashboards/agents/': typeof DashboardsAgentsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/dashboards'
    | '/about'
    | '/agents/$agentId'
    | '/agents/'
    | '/dashboards/'
    | '/agents/processes/$processId'
    | '/dashboards/agents'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/agents/$agentId'
    | '/agents'
    | '/dashboards'
    | '/agents/processes/$processId'
    | '/dashboards/agents'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/dashboards'
    | '/about'
    | '/agents/$agentId'
    | '/agents/'
    | '/dashboards/'
    | '/agents/processes/$processId'
    | '/dashboards/agents/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRouteRoute: typeof AgentsRouteRouteWithChildren
  DashboardsRouteRoute: typeof DashboardsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRouteRoute: AgentsRouteRouteWithChildren,
  DashboardsRouteRoute: DashboardsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/agents",
        "/dashboards",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/agents": {
      "filePath": "agents/route.tsx",
      "children": [
        "/agents/$agentId",
        "/agents/",
        "/agents/processes/$processId"
      ]
    },
    "/dashboards": {
      "filePath": "dashboards/route.tsx",
      "children": [
        "/dashboards/",
        "/dashboards/agents/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/agents/$agentId": {
      "filePath": "agents/$agentId.tsx",
      "parent": "/agents"
    },
    "/agents/": {
      "filePath": "agents/index.tsx",
      "parent": "/agents"
    },
    "/dashboards/": {
      "filePath": "dashboards/index.tsx",
      "parent": "/dashboards"
    },
    "/agents/processes/$processId": {
      "filePath": "agents/processes/$processId.tsx",
      "parent": "/agents"
    },
    "/dashboards/agents/": {
      "filePath": "dashboards/agents/index.tsx",
      "parent": "/dashboards"
    }
  }
}
ROUTE_MANIFEST_END */
